/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Rating } from "./rating";
import { Topic } from "./topic";
import { Expose, Transform, Type } from "class-transformer";

export enum Role {
    System = "system",
    Assistant = "assistant",
    User = "user",
}

export enum TypeT {
    Message = "message",
    Tool = "tool",
}

export class Message extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "event_timestamp" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    eventTimestamp?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "language" })
    language: string;

    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata?: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "rating" })
    rating: Rating;

    @SpeakeasyMetadata()
    @Expose({ name: "role" })
    role: Role;

    @SpeakeasyMetadata()
    @Expose({ name: "sentiment" })
    sentiment: number;

    @SpeakeasyMetadata({ elemType: Topic })
    @Expose({ name: "suggested_topics" })
    @Type(() => Topic)
    suggestedTopics?: Topic[];

    @SpeakeasyMetadata({ elemType: Topic })
    @Expose({ name: "topics" })
    @Type(() => Topic)
    topics: Topic[];

    @SpeakeasyMetadata()
    @Expose({ name: "translation" })
    translation?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TypeT;
}
