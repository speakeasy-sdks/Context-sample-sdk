/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Rating } from "./rating";
import { Expose, Transform, Type } from "class-transformer";

export class Input extends SpeakeasyBase {}

export enum MessageParamsRole {
    System = "system",
    Assistant = "assistant",
    User = "user",
}

export enum MessageParamsType {
    Message = "message",
    Tool = "tool",
}

export class MessageParams extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "event_timestamp" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    eventTimestamp?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "input" })
    @Type(() => Input)
    input?: Input;

    @SpeakeasyMetadata()
    @Expose({ name: "message" })
    message?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata?: Record<string, string>;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "observation" })
    observation?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "rating" })
    rating?: Rating;

    @SpeakeasyMetadata()
    @Expose({ name: "role" })
    role?: MessageParamsRole;

    @SpeakeasyMetadata()
    @Expose({ name: "thought" })
    thought?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: MessageParamsType;
}
